{"version":3,"sources":["components/header/logo.png","components/header/header.tsx","components/job/job.tsx","containers/list/list.tsx","fetches.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","Header","react","className","src","logo","alt","id","React","Job","this","props","job","contents","from","to","rider","timeOfCall","collected","delivered","List","filteredList","map","jobdata","index","job_job","key","status","response","Promise","resolve","reject","status_code","error","Error","statusText","json","make_fetch","api_url","url","type","auth","content_type","arguments","length","undefined","data","console","fetch","method","withCredentials","credentials","headers","Headers","Authorization","Content-type","body","JSON","stringify","then","log","users","catch","Vehicle","bearer","Object","classCallCheck","user_id","vehicle_id","input_data","Note","item_id","note_id","Task","session_id","task_id","Session","User","Control","_this","possibleConstructorReturn","getPrototypeOf","call","token","sessions","notes","tasks","vehicles","initialised","username","password","Component","App","state","api_control","login","session_data","get_session","react_default","a","createElement","Fragment","header_header","list_list","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.652c1cf2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.2b94c3e9.png\";","import * as React from \"react\";\nimport \"./header.css\";\nimport logo from \"./logo.png\";\n\nexport interface IProps {}\n\nexport interface IState {}\n\nclass Header extends React.Component<IProps, IState> {\n  // state = { :  }\n\n  public render() {\n    return (\n      <>\n        <div className=\"header\">\n          <img src={logo} alt={\"charity logo\"} className=\"logo\" />\n          <h1>\n            Co-ordinator <br />\n            dashboard\n          </h1>\n          <div className=\"commandBox\">\n            <i id=\"welcomeInfo\" className=\"fas fa-info-circle\" />\n            Command box here\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Header;\n","import * as React from \"react\";\nimport \"./job.css\";\nimport { IJob } from \"../../test-data\";\n\nexport interface IProps {\n  job: IJob;\n}\n\nexport interface IState {}\n\nclass Job extends React.Component<IProps, IState> {\n  // state = { :  }\n  public render() {\n    return (\n      <>\n        <div className=\"job\">\n          {/* the order of columns depends on the below. If columns \n          need to be re-arranged, you will need to re-examine column\n          widths in CSS files, too */}\n          <div className=\"packageContents\">{this.props.job.contents}</div>\n          <div className=\"transportFrom\">{this.props.job.from}</div>\n          <div className=\"transportTo\">{this.props.job.to}</div>\n          <div className=\"rider\">{this.props.job.rider}</div>\n          <div className=\"timeOfCall\">{this.props.job.timeOfCall}</div>\n          <div className=\"collected\">{this.props.job.collected}</div>\n          <div className=\"delivered\">{this.props.job.delivered}</div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Job;\n","import * as React from \"react\";\nimport Job from \"../../components/job/job\";\nimport \"./list.css\";\nimport { IJob } from \"../../test-data\";\n\nexport interface IProps {\n  filteredList: IJob[];\n}\n\nexport interface IState {}\n\nclass List extends React.Component<IProps, IState> {\n  // state = { :  }\n  public render() {\n    return (\n      <>\n        <div className=\"jobsList\">\n          <div className=\"tableHeading\">\n            {/* <Job job={testData[0]} /> */}\n            {/* if you re-arrange columns in Job component, you need to re-arrange these, too */}\n            <div>\n              <div>Contents</div>\n              <div>From</div>\n              <div>To</div>\n              <div>Rider</div>\n              <div>TOC</div>\n              <div>Collected at</div>\n              <div>Delivered at</div>\n            </div>\n          </div>\n          {this.props.filteredList.map((jobdata, index) => (\n            <Job key={index} job={jobdata} />\n          ))}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default List;\n","import React, { Component } from 'react';\n\nfunction status(response) {\n    if (response.status >= 200 && response.status < 300) {\n        return Promise.resolve(response)\n    } else {\n        return Promise.reject({ \"status_code\": response.status, \"error\": new Error(response.statusText), \"response\": response.json() })\n    }\n}\n\nfunction json(response) {\n    return response.json()\n}\n\nfunction make_fetch(api_url, url, type, auth, content_type = undefined, data = undefined) {\n    console.error(url, type, auth, content_type, data);\n    return fetch(api_url + url, {\n        method: type,\n        withCredentials: true,\n        credentials: 'include',\n        headers: new Headers({\n            'Authorization': auth,\n            'Content-type': content_type ? content_type :  \"text/html\"\n        }),\n        body: data ? JSON.stringify(data) : undefined\n    })\n        .then(status)\n        .then(json)\n        .then(function (data) {\n            console.log('Request succeeded with JSON response', data);\n            this.users = data;\n            return data;\n        }).catch(function (error) {\n            console.log('Request failed', error);\n            return data;\n        });\n\n}\n\nclass Vehicle {\n    constructor(bearer, api_url){\n        this.bearer = bearer;\n        this.api_url = api_url;\n    }\n\n    async get_vehicles(user_id) {\n        return make_fetch(this.api_url, \"vehicles/\" + user_id, \"GET\", this.bearer)\n    }\n\n    async get_vehicle(vehicle_id) {\n        return make_fetch(this.api_url, \"vehicle/\" + vehicle_id, \"GET\", this.bearer)\n    }\n\n    async create_vehicle(input_data) {\n        return make_fetch(this.api_url,  \"vehicles\", \"POST\", this.bearer, \"application/json\", input_data)\n    }\n}\n\nclass Note {\n    constructor(bearer, api_url){\n        this.bearer = bearer;\n        this.api_url = api_url;\n    }\n\n    async get_notes(item_id) {\n        return make_fetch(this.api_url, \"notes/\" + item_id, \"GET\", this.bearer)\n    }\n\n    async get_note(note_id) {\n        return make_fetch(this.api_url, \"note/\" + note_id, \"GET\", this.bearer)\n    }\n\n    async create_note(input_data) {\n        return make_fetch(this.api_url, \"notes\", \"POST\", this.bearer, \"application/json\", input_data)\n    }\n}\n\nclass Task {\n    constructor(bearer, api_url){\n        this.bearer = bearer;\n        this.api_url = api_url;\n    }\n\n    async get_tasks(session_id) {\n        return make_fetch(this.api_url, \"tasks\" + session_id, \"GET\", this.bearer)\n    }\n\n    async get_task(task_id) {\n        return make_fetch(this.api_url, \"task/\" + task_id, \"GET\", this.bearer)\n    }\n\n    async create_task(input_data) {\n        return make_fetch(this.api_url, \"tasks\", \"POST\", this.bearer, \"application/json\", input_data)\n    }\n}\n\nclass Session {\n    constructor(bearer, api_url) {\n        this.bearer = bearer;\n        this.users = undefined;\n        this.api_url = api_url;\n    }\n\n    async get_sessions(user_id) {\n        return make_fetch(this.api_url, \"sessions/\" + user_id, \"GET\", this.bearer)\n    }\n\n    async get_session(session_id) {\n        return make_fetch(this.api_url, \"session/\" + session_id, \"GET\", this.bearer)\n\n    }\n\n    async create_session(input_data) {\n        if (input_data) {\n            return make_fetch(this.api_url, \"sessions\", \"POST\", this.bearer, \"application/json\", input_data)\n        }\n        else  {\n            return make_fetch(this.api_url, \"sessions\", \"POST\", this.bearer)\n        }\n    }\n\n}\n\nclass User {\n    constructor(bearer, api_url){\n        this.bearer = bearer;\n        this.users = undefined;\n        this.api_url = api_url;\n    }\n\n    async get_users() {\n        return make_fetch(this.api_url, \"users\", \"GET\", this.bearer)\n    }\n\n    async get_user(user_id) {\n        return make_fetch(this.api_url, \"user/\" + user_id, \"GET\", this.bearer)\n\n    }\n\n    async create_user(input_data) {\n        return make_fetch(this.api_url, \"users\", \"POST\", this.bearer, \"application/json\", input_data)\n    }\n}\n\nclass Control extends  Component {\n    constructor(props){\n        super(props);\n        this.api_url = props.api_url;\n        this.token = \"\";\n        this.bearer = \"\";\n        this.sessions = undefined;\n        this.notes = undefined;\n        this.tasks = undefined;\n        this.vehicles = undefined;\n        this.initialised = false;\n        this.users = undefined;\n    }\n\n    async login(username, password) {\n        fetch(this.api_url + 'login', {\n            method: 'post',\n            headers: {\n                \"Content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\"\n            },\n            body: 'username=' + username + '&password=' + password\n        })\n            .then(status)\n            .then(json)\n            .then(function (data) {\n                console.log(\"Login successful\");\n                this.token = data['access_token'];\n                this.bearer = \"Bearer \" + this.token;\n                this.users = new User(this.bearer, this.api_url);\n                this.sessions = new Session(this.bearer, this.api_url);\n                this.notes = new Note(this.bearer, this.api_url);\n                this.tasks = new Task(this.bearer, this.api_url);\n                this.vehicles = new Vehicle(this.bearer, this.api_url);\n                this.initialised = true;\n            })\n            .catch(function (error) {\n                console.log(\"Request failed\", error);\n            });\n    }\n}\n\nexport default Control;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/header/header\";\nimport List from \"./containers/list/list\";\nimport testData, { IJob } from \"./test-data\";\nimport Control from \"./fetches.js\"\n\nexport interface IProps {\n  filteredList: IJob[];\n}\n\nclass App extends Component {\n  public state = {\n      api_control: new Control({\"api_url\": \"/api/v0.1/\"}),\n\n  };\n  public render() {\n    // const modal = document.getElementById(\"myModal\");\n    // const infoIcon = document.getElementById(\"welcomeInfo\");\n\n    // infoIcon.onclick = modalToggled => {\n    //   modalToggled.preventDefault();\n    //   modal.style.display = \"block\";\n    // };\n    // window.onclick = event => {\n    //   if (event.target === modal) {\n    //     modal.style.display = \"none\";\n    //   }\n    // };\n\n      this.state.api_control.login(\"admin\", \"asdfasdf\");\n      let session_data = this.state.api_control.sessions.get_session(\"f6479de6-0c8b-4290-b1b0-458b3bd5d443\");\n\n    return (\n      <>\n        <div id=\"myModal\" className=\"modal\">\n          <div className=\"modal-content\">\n            <p>This is the welcome modal</p>\n          </div>\n        </div>\n        <Header />\n        <List filteredList={session_data} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}