"""pep8 variable names

Revision ID: ff03648618e7
Revises: 29a43b1241b0
Create Date: 2019-05-18 20:31:36.783566

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'ff03648618e7'
down_revision = '29a43b1241b0'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint(None, 'address', ['uuid'])
    op.add_column('delete_flags', sa.Column('object_type', sa.Integer(), nullable=True))
    op.add_column('delete_flags', sa.Column('object_uuid', postgresql.UUID(as_uuid=True), nullable=True))
    op.add_column('delete_flags', sa.Column('time_to_delete', sa.Integer(), nullable=True))
    op.create_unique_constraint(None, 'delete_flags', ['uuid'])
    op.drop_column('delete_flags', 'timeToDelete')
    op.drop_column('delete_flags', 'objectType')
    op.drop_column('delete_flags', 'objectUUID')
    op.create_unique_constraint(None, 'deliverable', ['uuid'])
    op.create_unique_constraint(None, 'note', ['uuid'])
    op.add_column('saved_locations', sa.Column('flagged_for_deletion', sa.Boolean(), nullable=True))
    op.create_unique_constraint(None, 'saved_locations', ['uuid'])
    op.drop_column('saved_locations', 'flaggedForDeletion')
    op.add_column('session', sa.Column('flagged_for_deletion', sa.Boolean(), nullable=True))
    op.create_unique_constraint(None, 'session', ['uuid'])
    op.drop_column('session', 'flaggedForDeletion')
    op.add_column('task', sa.Column('contact_name', sa.String(length=64), nullable=True))
    op.add_column('task', sa.Column('contact_number', sa.Integer(), nullable=True))
    op.add_column('task', sa.Column('final_duration', sa.Time(), nullable=True))
    op.add_column('task', sa.Column('flagged_for_deletion', sa.Boolean(), nullable=True))
    op.create_unique_constraint(None, 'task', ['uuid'])
    op.drop_column('task', 'contactNumber')
    op.drop_column('task', 'finalDuration')
    op.drop_column('task', 'contactName')
    op.drop_column('task', 'flaggedForDeletion')
    op.add_column('user', sa.Column('assigned_vehicle', postgresql.UUID(as_uuid=True), nullable=True))
    op.add_column('user', sa.Column('flagged_for_deletion', sa.Boolean(), nullable=True))
    op.create_unique_constraint(None, 'user', ['uuid'])
    op.drop_constraint('user_assignedVehicle_fkey', 'user', type_='foreignkey')
    op.create_foreign_key(None, 'user', 'vehicle', ['assigned_vehicle'], ['uuid'])
    op.drop_column('user', 'flaggedForDeletion')
    op.drop_column('user', 'assignedVehicle')
    op.add_column('vehicle', sa.Column('date_of_manufacture', sa.Date(), nullable=True))
    op.add_column('vehicle', sa.Column('date_of_registration', sa.Date(), nullable=True))
    op.add_column('vehicle', sa.Column('flagged_for_deletion', sa.Boolean(), nullable=True))
    op.add_column('vehicle', sa.Column('registration_number', sa.String(length=10), nullable=True))
    op.create_unique_constraint(None, 'vehicle', ['uuid'])
    op.drop_column('vehicle', 'registrationNumber')
    op.drop_column('vehicle', 'dateOfManufacture')
    op.drop_column('vehicle', 'dateOfRegistration')
    op.drop_column('vehicle', 'flaggedForDeletion')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('vehicle', sa.Column('flaggedForDeletion', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('vehicle', sa.Column('dateOfRegistration', sa.DATE(), autoincrement=False, nullable=True))
    op.add_column('vehicle', sa.Column('dateOfManufacture', sa.DATE(), autoincrement=False, nullable=True))
    op.add_column('vehicle', sa.Column('registrationNumber', sa.VARCHAR(length=10), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'vehicle', type_='unique')
    op.drop_column('vehicle', 'registration_number')
    op.drop_column('vehicle', 'flagged_for_deletion')
    op.drop_column('vehicle', 'date_of_registration')
    op.drop_column('vehicle', 'date_of_manufacture')
    op.add_column('user', sa.Column('assignedVehicle', postgresql.UUID(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('flaggedForDeletion', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'user', type_='foreignkey')
    op.create_foreign_key('user_assignedVehicle_fkey', 'user', 'vehicle', ['assignedVehicle'], ['uuid'])
    op.drop_constraint(None, 'user', type_='unique')
    op.drop_column('user', 'flagged_for_deletion')
    op.drop_column('user', 'assigned_vehicle')
    op.add_column('task', sa.Column('flaggedForDeletion', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('task', sa.Column('contactName', sa.VARCHAR(length=64), autoincrement=False, nullable=True))
    op.add_column('task', sa.Column('finalDuration', postgresql.TIME(), autoincrement=False, nullable=True))
    op.add_column('task', sa.Column('contactNumber', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'task', type_='unique')
    op.drop_column('task', 'flagged_for_deletion')
    op.drop_column('task', 'final_duration')
    op.drop_column('task', 'contact_number')
    op.drop_column('task', 'contact_name')
    op.add_column('session', sa.Column('flaggedForDeletion', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'session', type_='unique')
    op.drop_column('session', 'flagged_for_deletion')
    op.add_column('saved_locations', sa.Column('flaggedForDeletion', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'saved_locations', type_='unique')
    op.drop_column('saved_locations', 'flagged_for_deletion')
    op.drop_constraint(None, 'note', type_='unique')
    op.drop_constraint(None, 'deliverable', type_='unique')
    op.add_column('delete_flags', sa.Column('objectUUID', postgresql.UUID(), autoincrement=False, nullable=True))
    op.add_column('delete_flags', sa.Column('objectType', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('delete_flags', sa.Column('timeToDelete', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'delete_flags', type_='unique')
    op.drop_column('delete_flags', 'time_to_delete')
    op.drop_column('delete_flags', 'object_uuid')
    op.drop_column('delete_flags', 'object_type')
    op.drop_constraint(None, 'address', type_='unique')
    # ### end Alembic commands ###
