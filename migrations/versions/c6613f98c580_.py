"""

Revision ID: c6613f98c580
Revises: 
Create Date: 2019-05-08 19:57:42.901688

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlalchemy_utils

# revision identifiers, used by Alembic.
revision = 'c6613f98c580'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('address',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('line1', sa.String(length=64), nullable=True),
    sa.Column('line2', sa.String(length=64), nullable=True),
    sa.Column('town', sa.String(length=64), nullable=True),
    sa.Column('county', sa.String(length=64), nullable=True),
    sa.Column('country', sa.String(length=64), nullable=True),
    sa.Column('postcode', sa.String(length=64), nullable=True),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('delete_flags',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('objectUUID', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('timeToDelete', sa.Integer(), nullable=True),
    sa.Column('objectType', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_index(op.f('ix_delete_flags_timestamp'), 'delete_flags', ['timestamp'], unique=False)
    op.create_table('vehicle',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('manufacturer', sa.String(length=64), nullable=True),
    sa.Column('model', sa.String(length=64), nullable=True),
    sa.Column('dateOfManufacture', sa.Date(), nullable=True),
    sa.Column('dateOfRegistration', sa.Date(), nullable=True),
    sa.Column('registrationNumber', sa.String(length=10), nullable=True),
    sa.Column('flaggedForDeletion', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_index(op.f('ix_vehicle_timestamp'), 'vehicle', ['timestamp'], unique=False)
    op.create_table('saved_locations',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('name', sa.String(length=64), nullable=True),
    sa.Column('contact', sa.String(length=64), nullable=True),
    sa.Column('phoneNumber', sa.Integer(), nullable=True),
    sa.Column('flaggedForDeletion', sa.Boolean(), nullable=True),
    sa.Column('address_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['address_id'], ['address.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_index(op.f('ix_saved_locations_timestamp'), 'saved_locations', ['timestamp'], unique=False)
    op.create_table('user',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('address_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('username', sa.String(length=64), nullable=True),
    sa.Column('email', sqlalchemy_utils.types.email.EmailType(length=255), nullable=True),
    sa.Column('password', sa.String(length=128), nullable=True),
    sa.Column('name', sa.String(length=64), nullable=True),
    sa.Column('dob', sa.Date(), nullable=True),
    sa.Column('assignedVehicle', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('patch', sa.String(length=64), nullable=True),
    sa.Column('status', sa.String(length=64), nullable=True),
    sa.Column('flaggedForDeletion', sa.Boolean(), nullable=True),
    sa.Column('roles', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default='true', nullable=True),
    sa.ForeignKeyConstraint(['address_id'], ['address.uuid'], ),
    sa.ForeignKeyConstraint(['assignedVehicle'], ['vehicle.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('username'),
    sa.UniqueConstraint('uuid')
    )
    op.create_index(op.f('ix_user_timestamp'), 'user', ['timestamp'], unique=False)
    op.create_table('session',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('flaggedForDeletion', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_index(op.f('ix_session_timestamp'), 'session', ['timestamp'], unique=False)
    op.create_table('task',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('pickup_address_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('dropoff_address_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('patch', sa.String(length=64), nullable=True),
    sa.Column('contactName', sa.String(length=64), nullable=True),
    sa.Column('contactNumber', sa.Integer(), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('finalDuration', sa.Time(), nullable=True),
    sa.Column('miles', sa.Integer(), nullable=True),
    sa.Column('flaggedForDeletion', sa.Boolean(), nullable=True),
    sa.Column('session', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['dropoff_address_id'], ['address.uuid'], ),
    sa.ForeignKeyConstraint(['pickup_address_id'], ['address.uuid'], ),
    sa.ForeignKeyConstraint(['session'], ['session.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_index(op.f('ix_task_timestamp'), 'task', ['timestamp'], unique=False)
    op.create_table('deliverable',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=True),
    sa.Column('task', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['task'], ['task.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('note',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('body', sa.String(length=10000), nullable=True),
    sa.Column('task', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('user', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('session', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('vehicle', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('deliverable', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['deliverable'], ['deliverable.uuid'], ),
    sa.ForeignKeyConstraint(['session'], ['session.uuid'], ),
    sa.ForeignKeyConstraint(['task'], ['task.uuid'], ),
    sa.ForeignKeyConstraint(['user'], ['user.uuid'], ),
    sa.ForeignKeyConstraint(['vehicle'], ['vehicle.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('note')
    op.drop_table('deliverable')
    op.drop_index(op.f('ix_task_timestamp'), table_name='task')
    op.drop_table('task')
    op.drop_index(op.f('ix_session_timestamp'), table_name='session')
    op.drop_table('session')
    op.drop_index(op.f('ix_user_timestamp'), table_name='user')
    op.drop_table('user')
    op.drop_index(op.f('ix_saved_locations_timestamp'), table_name='saved_locations')
    op.drop_table('saved_locations')
    op.drop_index(op.f('ix_vehicle_timestamp'), table_name='vehicle')
    op.drop_table('vehicle')
    op.drop_index(op.f('ix_delete_flags_timestamp'), table_name='delete_flags')
    op.drop_table('delete_flags')
    op.drop_table('address')
    # ### end Alembic commands ###
